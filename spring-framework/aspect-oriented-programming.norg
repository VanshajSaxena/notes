* Aspect Oriented Programming
  Aspect Oriented Programming (AOP) is a programming paradigm that enables
  developers to separate cross-cutting concerns from the business logic.

  ~ Aspect: A module that encapsulates a concern.
  ~ Joint Point: A place in the program where the Aspect can be applied.
  ~ Point Cut: A set of *rules* that define where aspect should be applied.
  ~ Advice: The actual *action* take when the Point Cut matches a Joint Point.
  ~ Weaving: The process of applying aspects to the target classes.

  @code java
  @Aspect class LoggingAspect {}
  @end

* RESTful APIs
  For an API to be considered RESTful, it must adhere to 6 architectural
  constraints:

  ~ Client-Server Architectural: The API must separate the client and the
    server from each other. Allowing independent evolution of both.
  ~ Statelessness: No state is stored on the server.
  ~ Chacheability: Caching should be possible.
  ~ Uniform Interface: Consistent structure for interaction with API.
  ~ Layered System: Can have multiple layers.
  ~ Code on Demand: The server can send executable code the client. Rarely
    used.

* Java Class Path System
  Java loads classes from all the JARs or directories listed in the CLASSPATH
  environment variable, without knowing the logical relationship between them.
  It is essentially a `:` separated list of directories and JAR files.


  The class path can be set in multiple ways:
  - `java -cp myApp.jar:lib/* com.example.Main` from the command line.
  - Environment Variable
  @code bash
  export CLASSPATH=/path/to/myApp.jar:/path/to/lib/*
  java com.example.Main
  @end
  - Manifest File in a JAR

