* [Spring Security Architecture Principles by Daniel Garnier]{https://youtu.be/HyoLl3VcRFY?si=jnd3rz3GZ7oKldFY}

** Filters

   - In the past, we used to configure Spring Security by extending
     `WebSecurityConfigurerAdapter`. This changed in Spring Security 6.
   - In SS6 we configure security by having a configuration class and
     providing a bean of `SecurityFilterChain`.
   - `OncePerRequestFilter` will be handling most of the Filter creation process
     which comes from spring framework itself.
   - `OncePerRequestFilter` has only one method to implement
     `doFilterInternal` in contrast to the jakarta filter interface which
     expects 3 methods to be overwridden.
   - Any filter that performs authentication needs to be put before the
     `AuthorizationFilter` filter, just because any request first needs to be
     authenticated before any authorization checks can be performed.

*** Recap

    ~ Basic `Filter`, specifically `OncePerRequestFilter`
    ~~ Takes `HttpServletRequest`, `HttpServletResponse`
    ~~ Reads from request
    ~~~ Sometimes writes to Response
    ~~~ Sometimes does nothing
    ~~ If request is /secure/, calls `filterChain.doFilter(...)`
    ~ Filters are registered `SecurityFilterChain`
    -- Order matters
    -- Before `AuthorizationFilter.class`
