* JSON Web Token (JWT)

  {https://tools.ietf.org/html/rfc7519}[Full Specification]

  JSON Web Token is an open standard (RFC7519) that defines a compact and
  self-contained way for securely transmitting information between parties as a
  JSON object. This information can be verified and trusted because it is
  digitally signed. JWTs can be signed using a secret (with the HMAC algorithm)
  or a public/private key pair using RSA or ECDSA.

** Abstract
   JSON Web Token (JWT) is a compact, URL-safe means of representing claims to
   be transferred between two parties.  The claims in a JWT are encoded as a
   JSON object that is used as the payload of a JSON Web Signature ([JWS])
   structure or as the plaintext of a JSON Web Encryption ([JWE]) structure,
   enabling the claims to be digitally signed or integrity protected with a
   [Message Authentication Code (MAC)]{:$/programming-concepts/cryptography/overview:# Message Authentication Codes (MACs)} and/or encrypted.

** [JSON Web Token (JWT) Overview]{https://datatracker.ietf.org/doc/html/rfc7519#section-3}
   JWTs represent a set of claims as a JSON object that is encoded in a [JWS]
   and/or [JWT]{# JSON Web Token (JWT)} structure.  This JSON object is the JWT
   Claims Set. As per Section 4 of [RFC7159], the JSON object consists of zero
   or more name/value pairs (or members), where the names are strings and the
   values are arbitrary JSON values.  These members are the claims represented
   by the JWT.  This JSON object MAY contain whitespace and/or line breaks
   before or after any JSON values or structural characters, in accordance with
   Section 2 of [RFC7159]{https://datatracker.ietf.org/doc/html/rfc7159}.

   The member names within the JWT Claims Set are referred to as Claim Names.
   The corresponding values are referred to as Claim Values.

   The contents of the JOSE Header describe the cryptographic operations
   applied to the JWT Claims Set.  If the JOSE Header is for a [JWS], the JWT is
   represented as a JWS and the claims are digitally signed or MACed, with the
   JWT Claims Set being the JWS Payload.  If the JOSE Header is for a [JWE], the
   JWT is represented as a JWE and the claims are encrypted, with the JWT
   Claims Set being the plaintext encrypted by the JWE.  A JWT may be enclosed
   in another JWE or JWS structure to create a Nested JWT, enabling nested
   signing and encryption to be performed.

   A JWT is represented as a sequence of URL-safe parts separated by period
   ('.') characters.  Each part contains a base64url-encoded value.  The number
   of parts in the JWT is dependent upon the representation of the resulting
   JWS using the [JWS] Compact Serialization or [JWE] using the [JWE] Compact
   Serialization.

** Structure
   In its compact form, JSON Web Tokens consist of three parts separated by
   dots (.), which are:

   - [Header]{# Header}
   - [Payload]{# Payload}
   - [Signature]{# Signature}

   Thus, it typically looks like this:

   @code json
   xxxxx.yyyyy.zzzzz
   @end

*** Header
    The header is a JSON object. The header typically consists of two key-value
    pairs:

    - `alg`: and the signing algorithm being used, such as HS256 (HMAC with
      SHA256, uses symmetric key), RS256 (RSA with SHA256, uses asymmetric
      key).
    - `typ`: (Optional) The type of the token, which is typically "JWT",
      indicates token type.
    
    @code json
    {
      "alg": "HS256",
      "typ": "JWT",
    }
    @end

    Then, this JSON object is Base64Url encoded to form the first part of the
    JWT.

*** Payload
    The second part of the token is the payload, which is also a JSON object
    and contains the claims. Claims are statements about an entity (typically,
    the user) and additional data. There are three types of claims:

**** Registered claims
     These are a set of predefined claims which are not mandatory but
     recommended, to provide a set of useful, interoperable claims.

     - `iss` (Issuer): Identifies the principal that issued the JWT.
     - `sub` (Subject): Identifies the principal that is the subject of the JWT.
     - `aud` (Audience): Identifies the recipients that the JWT is intended for.
     - `exp` (Expiration Time): Specifies when the token expires.
     - `nbf` (Not Before): Specifies when the token becomes valid.
     - `iat` (Issued At): Indicates when the token was issued.
     - `jti` (JWT ID): A unique identifier for the token.

     *Note that the claim names are only three characters long, as JWT is
     designed to be compact.*

**** Public claims
     Custom claims that can be defined to share information, but should be
     collision-resistant.

**** Private claims
     Custom claims that are agreed upon between the two parties, these are not
     required to be registered for standardised interpretation.

     @code json
     {
       "sub": "1234567890",
       "name": "John",
       "admin": true,
       "iat": 1516239022,
       "exp": 1610138120,
     }
     @end

     Then, this JSON object is Base64Url encoded to form the second part of the
     JWT.

     *This payload is not inherently secure; unless encrypted (as in JWE), its
     contents are visible to anyone who has access to the token.*

*** Signature
    To create the signature part you need the encoded header, the
    encoded payload and a secret. Then using the algorithm specified in the
    header, a hash (HMAC in case of HS256) is computed.

    For example, if you want to use the HMAC SHA256 algorithm, the signature
    will be created in the following way:

    @code python
    HS256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)
    @end

    Then this keyed-hash is Base64Url encoded to form the signature.

    This signature is then appended to the header and payload, this makes a
    complete *JWT*.

    The signature can used to verify the token's authenticity and integrity. In
    the case of tokens signed with a private key, it can also verify that the
    sender of the JWT is who it says it is.

    To play around with a JWT, visit: {https://jwt.io/}

** A Typical JWT Creating Process
   Typically a [JWT] is created and used as follows:

*** JWT Creation (Server Side):

    - *JSON Objects*: We start with a header JSON object and a payload JSON
      object (containing claims).

    - *Encoding*: Both the header and payload are Base64URL encoded separately,
      and then concatenated with a dot (`.`) forming a string like:

    @code css
    encodedHeader + "." + encodedPayload
    @end

    - *Hashing*: Then a keyed-hashing algorithm is used (typically, HMAC with
      SHA-256 (HS256)), which is unlike a plain hash algorithm uses a secret
      key in addition to the data, which makes the hash dependent on both the
      data and the key. This ensures only someone with the secret key can
      compute and verify (recompute later) the hash.

    - *Signature*: The result of the HMAC (keyed-hash) is then Base64URL
      encoded. This becomes the signature. Finally, the JWT is created by
      appending this signature with the encoded header and encoded payload dot
      concatenated string.

    @code css
    encodedHeader + "." + encodedPayload + "." + encodedSignature
    @end

    - *Transmission*: Since the header and payload are only encoded (not
      encrypted), anyone with the token can decode and read them. Therefore,
      it's crucial to send the JWT over a secure channel (like HTTPS) to
      prevent interception.

*** JWT Usage (Client Side):

    - *Storage*: The client receives the JWT and stores it (commonly in local
      storage or secure, HTTP-only cookies).

    - *Subsequent Requests*: For every request requiring authorization, the
      client sends the token—typically in the `Authorization` header as a Bearer
      token:

    @code css
    Authorization: Bearer <JWT>
    @end

*** JWT Verification (Server Side):

    - *Parsing*: Upon receiving the token, the server splits it into its
      three parts: header, payload, and signature.

    - *Recomputing Signature*: The server takes the original encoded header and
      payload (i.e., the “header.payload” string) and recomputes the HMAC using
      the same secret key and algorithm as was used to create the token.

    - *Comparing Signatures*:  The computed signature is then Base64URL encoded
      and compared with the signature part extracted from the token. If they
      match, the token is considered valid; if not, it indicates that the token
      has been tampered with or was generated using a different key.

    - *Additional Claim Checks*: Beyond the signature, the server may also
      validate claims (like `exp`, `nbf`, `iss`, etc.) to further ensure that
      the token is still valid.

** Terminology
   The terms "JSON Web Signature (JWS)", "Base64url Encoding", "Header
   Parameter", "JOSE Header", "JWS Compact Serialization", "JWS Payload", "JWS
   Signature", and "Unsecured JWS" are defined by the JWS specification
   [JWS]{https://datatracker.ietf.org/doc/html/rfc7515}.

   The terms "JSON Web Encryption (JWE)", "Content Encryption Key (CEK)", "JWE
   Compact Serialization", "JWE Encrypted Key", and "JWE Initialization Vector"
   are defined by the JWE specification
   [JWE]{https://datatracker.ietf.org/doc/html/rfc7516}.

   The terms "Ciphertext", "Digital Signature", "Message Authentication Code
   (MAC)", and "Plaintext" are defined by the "Internet Security Glossary,
   Version 2" [RFC4949]{https://datatracker.ietf.org/doc/html/rfc4949}.
