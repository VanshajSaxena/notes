* JSON Web Token

  {https://tools.ietf.org/html/rfc7519}[Full Specification]

  JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact
  and self-contained way for securely transmitting information between parties
  as a JSON object. This information can be verified and trusted because it is
  digitally signed. JWTs can be signed using a secret (with the HMAC algorithm)
  or a public/private key pair using RSA or ECDSA.

  Although JWTs can be encrypted to also provide secrecy between parties, we
  will focus on signed tokens. Signed tokens can verify the integrity of the
  claims contained within it, while encrypted tokens hide those claims from
  other parties. When tokens are signed using public/private key pairs, the
  signature also certifies that only the party holding the private key is the
  one that signed it.

** Abstract
   JSON Web Token (JWT) is a compact, URL-safe means of representing claims to
   be transferred between two parties.  The claims in a JWT are encoded as a
   JSON object that is used as the payload of a JSON Web Signature (JWS)
   structure or as the plaintext of a JSON Web Encryption (JWE) structure,
   enabling the claims to be digitally signed or integrity protected with a
   [Message Authentication Code (MAC)]{:$/programming-concepts/cryptography/overview:# Message Authentication Codes (MACs)} and/or encrypted.

** [JSON Web Token (JWT) Overview]{https://datatracker.ietf.org/doc/html/rfc7519#section-3}
   JWTs represent a set of claims as a JSON object that is encoded in a [JWS]
   and/or JWT structure.  This JSON object is the JWT Claims Set. As per
   Section 4 of RFC 7159 [RFC7159], the JSON object consists of zero or more
   name/value pairs (or members), where the names are strings and the values
   are arbitrary JSON values.  These members are the claims represented by the
   JWT.  This JSON object MAY contain whitespace and/or line breaks before or
   after any JSON values or structural characters, in accordance with Section 2
   of [RFC7159]{https://datatracker.ietf.org/doc/html/rfc7159}.

   The member names within the JWT Claims Set are referred to as Claim Names.
   The corresponding values are referred to as Claim Values.

   The contents of the JOSE Header describe the cryptographic operations
   applied to the JWT Claims Set.  If the JOSE Header is for a [JWS], the JWT is
   represented as a JWS and the claims are digitally signed or MACed, with the
   JWT Claims Set being the JWS Payload.  If the JOSE Header is for a [JWE], the
   JWT is represented as a JWE and the claims are encrypted, with the JWT
   Claims Set being the plaintext encrypted by the JWE.  A JWT may be enclosed
   in another JWE or JWS structure to create a Nested JWT, enabling nested
   signing and encryption to be performed.

   A JWT is represented as a sequence of URL-safe parts separated by period
   ('.') characters.  Each part contains a base64url-encoded value.  The number
   of parts in the JWT is dependent upon the representation of the resulting
   JWS using the [JWS] Compact Serialization or [JWE] using the [JWE] Compact
   Serialization.

** Structure
   In its compact form, JSON Web Tokens consist of three parts separated by
   dots (.), which are:

   - [Header]{# Header}
   - [Payload]{# Payload}
   - [Signature]{# Signature}

   Thus, it typically looks like this:

   @code json
   xxxxx.yyyyy.zzzzz
   @end

*** Header
    The header typically consists of two parts: the type of the token, which is
    JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.

    @code json
    {
      "alg": "HS256",
      "typ": "JWT",
    }
    @end

    This JSON is a Base64url-encoded representation of the header.

*** Payload
    The second part of the token is the payload, which contains the claims.
    Claims are statements about an entity (typically, the user) and additional
    data. There are three types of claims: registered, public, and private
    claims.

**** Registered claims
     These are a set of predefined claims which are not mandatory but
     recommended, to provide a set of useful, interoperable claims. Some of
     them are: iss (issuer), exp (expiration time), sub (subject), aud
     (audience), and others.

     *Notice that the claim names are only three characters long, as JWT is
     meant to be compact.*

**** Public claims
     These can be defined at will by those using JWTs. But to avoid collisions,
     they should be defined in the IANA JSON Web Token Registry or be defined
     as a URI that contains a collision-resistant namespace.

**** Private claims
     These are the custom claims created to share information between parties
     that agree on using them and are neither registered or public claims.

     An example payload could be:

     @code json
     {
       "sub": "1234567890",
       "name": "John",
       "admin": true
     }
     @end

     This JSON is a Base64url-encoded representation of the payload.

*** Signature
    To create the signature part you have to take the encoded header, the
    encoded payload, a secret, the algorithm specified in the header, and sign
    that.

    For example, if you want to use the HMAC SHA256 algorithm, the signature
    will be created in the following way:

    @code python
    HMACSHA256( base64UrlEncode(header) + "." +
    base64UrlEncode(payload),
    secret)
    @end

    The signature is used to verify the message wasn't changed along the way,
    and, in the case of tokens signed with a private key, it can also verify
    that the sender of the JWT is who it says it is.

** Terminology
   The terms "JSON Web Signature (JWS)", "Base64url Encoding", "Header
   Parameter", "JOSE Header", "JWS Compact Serialization", "JWS Payload", "JWS
   Signature", and "Unsecured JWS" are defined by the JWS specification
   [JWS]{https://datatracker.ietf.org/doc/html/rfc7519#ref-JWS}.

   The terms "JSON Web Encryption (JWE)", "Content Encryption Key (CEK)", "JWE
   Compact Serialization", "JWE Encrypted Key", and "JWE Initialization Vector"
   are defined by the JWE specification
   [JWE]{https://datatracker.ietf.org/doc/html/rfc7519#ref-JWE}.

   The terms "Ciphertext", "Digital Signature", "Message Authentication Code
   (MAC)", and "Plaintext" are defined by the "Internet Security Glossary,
   Version 2" [RFC4949]{https://datatracker.ietf.org/doc/html/rfc4949}.
